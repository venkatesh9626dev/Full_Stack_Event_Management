1: In pydantic, (...) is used to make a field as a required field

2: I am using a binary of uuid as a primary key in users table for reducing space and for speed indexing

3: Casting the bianry to normal uuid (vice versa) while sending the response to the client.

4: Got to know about differnt ways of interacting with database, one is with core sql commands and the other orm based query.

5: Got to know about getattr() of the instance object which provides the value of object's attribute value

6: By learning that getattr(), I get to knew about dynamic selecting of instance object.

7: Don't need to explicitly define default none is sql because i will be none, if we not give value to the field


Tools Installed:

flake8 → Checks for PEP 8 violations & syntax errors

pylint → Provides a code quality score

black → Auto-formats code

isort → Sorts imports correctly


The Most Efficient Flow
1️⃣ User visits "My Bookings" → Fetch from the backend once & cache in frontend state.
2️⃣ User registers for a new event →

✅ Update cached data locally.

✅ Send request to backend, but don’t refetch all bookings.
3️⃣ User refreshes the page after a long time → Refetch bookings from backend.
4️⃣ Backend caches data (optional) → Use Redis for heavy traffic.

✅ This minimizes API hits, improves performance, and keeps data fresh! 🚀